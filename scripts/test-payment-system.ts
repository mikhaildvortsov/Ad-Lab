import { testYooKassaConnection, createSBPPayment, getPaymentStatus } from '../lib/yookassa-client';
import { BillingService } from '../lib/services/billing-service';
import { UserService } from '../lib/services/user-service';
import dotenv from 'dotenv';
import path from 'path';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

interface TestResult {
  test: string;
  status: 'PASS' | 'FAIL' | 'SKIP';
  message: string;
  duration?: number;
}

class PaymentSystemTester {
  private results: TestResult[] = [];

  private async runTest(testName: string, testFn: () => Promise<void>): Promise<void> {
    const startTime = Date.now();
    
    try {
      console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
      await testFn();
      
      const duration = Date.now() - startTime;
      this.results.push({
        test: testName,
        status: 'PASS',
        message: '–¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ',
        duration
      });
      
      console.log(`‚úÖ ${testName} - PASS (${duration}ms)`);
    } catch (error: any) {
      const duration = Date.now() - startTime;
      this.results.push({
        test: testName,
        status: 'FAIL',
        message: error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        duration
      });
      
      console.log(`‚ùå ${testName} - FAIL (${duration}ms): ${error.message}`);
    }
  }

  private skipTest(testName: string, reason: string): void {
    this.results.push({
      test: testName,
      status: 'SKIP',
      message: reason
    });
    
    console.log(`‚è≠Ô∏è  ${testName} - SKIP: ${reason}`);
  }

  async testEnvironmentSetup(): Promise<void> {
    await this.runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è', async () => {
      const requiredVars = [
        'YOOKASSA_SHOP_ID',
        'YOOKASSA_SECRET_KEY',
        'DATABASE_URL',
        'JWT_SECRET'
      ];

      const missing = requiredVars.filter(varName => !process.env[varName]);
      
      if (missing.length > 0) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${missing.join(', ')}`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É JWT_SECRET
      if (process.env.JWT_SECRET && process.env.JWT_SECRET.length < 32) {
        throw new Error('JWT_SECRET –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞');
      }
    });
  }

  async testYooKassaConfiguration(): Promise<void> {
    await this.runTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YooKassa', async () => {
      const result = await testYooKassaConnection();
      
      if (!result.success) {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YooKassa');
      }
      
      if (!result.configured) {
        throw new Error('YooKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      }
    });
  }

  async testDatabaseConnection(): Promise<void> {
    await this.runTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö', async () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
      const plansResult = await BillingService.getSubscriptionPlans();
      
      if (!plansResult.success) {
        throw new Error(plansResult.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –∏–∑ –ë–î');
      }

      if (!plansResult.data || plansResult.data.length === 0) {
        throw new Error('–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏');
      }

      console.log(`   üìã –ù–∞–π–¥–µ–Ω–æ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏: ${plansResult.data.length}`);
    });
  }

  async testPaymentCreation(): Promise<void> {
    if (process.env.NODE_ENV === 'production') {
      this.skipTest('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', '–ü—Ä–æ–ø—É—â–µ–Ω–æ –≤ production');
      return;
    }

    await this.runTest('–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞', async () => {
      const testOrderId = `test_${Date.now()}`;
      
      const paymentResult = await createSBPPayment({
        amount: 1, // 1 —Ä—É–±–ª—å –¥–ª—è —Ç–µ—Å—Ç–∞
        description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–∏—Å—Ç–µ–º—ã Ad Lab',
        orderId: testOrderId,
        userId: 'test_user_id',
        planId: 'test_plan',
        metadata: {
          test: true,
          environment: 'test'
        }
      });

      if (!paymentResult.success) {
        throw new Error(paymentResult.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞');
      }

      if (!paymentResult.paymentId) {
        throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω ID –ø–ª–∞—Ç–µ–∂–∞');
      }

      console.log(`   üí≥ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂: ${paymentResult.paymentId}`);
      console.log(`   üîó QR –¥–∞–Ω–Ω—ã–µ: ${paymentResult.qrData ? '–ü–æ–ª—É—á–µ–Ω—ã' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      const statusResult = await getPaymentStatus(paymentResult.paymentId);
      
      if (!statusResult.success) {
        console.warn(`   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${statusResult.error}`);
      } else {
        console.log(`   üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: ${statusResult.status}`);
      }
    });
  }

  async testBillingService(): Promise<void> {
    await this.runTest('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ BillingService', async () => {
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤
      const plansResult = await BillingService.getSubscriptionPlans();
      if (!plansResult.success) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤');
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
      if (plansResult.data && plansResult.data.length > 0) {
        const planId = plansResult.data[0].id;
        const planResult = await BillingService.getSubscriptionPlan(planId);
        
        if (!planResult.success) {
          throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –ø–æ ID');
        }

        console.log(`   üìã –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω: ${planResult.data?.name} - ‚ÇΩ${planResult.data?.price_monthly}`);
      }
    });
  }

  printSummary(): void {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ù–û–ô –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));

    const passed = this.results.filter(r => r.status === 'PASS').length;
    const failed = this.results.filter(r => r.status === 'FAIL').length;
    const skipped = this.results.filter(r => r.status === 'SKIP').length;

    console.log(`‚úÖ –ü—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: ${failed}`);
    console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`);
    console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${passed + failed + skipped}`);

    if (failed > 0) {
      console.log('\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:');
      this.results
        .filter(r => r.status === 'FAIL')
        .forEach(result => {
          console.log(`   ‚Ä¢ ${result.test}: ${result.message}`);
        });
    }

    if (skipped > 0) {
      console.log('\n‚è≠Ô∏è  –ü–†–û–ü–£–©–ï–ù–ù–´–ï –¢–ï–°–¢–´:');
      this.results
        .filter(r => r.status === 'SKIP')
        .forEach(result => {
          console.log(`   ‚Ä¢ ${result.test}: ${result.message}`);
        });
    }

    const totalTime = this.results.reduce((sum, r) => sum + (r.duration || 0), 0);
    console.log(`\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalTime}ms`);

    if (failed === 0) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û! –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
    } else {
      console.log('\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´! –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ production.');
      process.exit(1);
    }
  }

  async runAllTests(): Promise<void> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã Ad Lab...\n');

    // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await this.testEnvironmentSetup();
    await this.testDatabaseConnection();
    await this.testYooKassaConfiguration();
    await this.testBillingService();
    await this.testPaymentCreation();

    this.printSummary();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
  const tester = new PaymentSystemTester();
  
  try {
    await tester.runAllTests();
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main().catch(console.error);
}

export { PaymentSystemTester }; 