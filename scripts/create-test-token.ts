require('dotenv').config({ path: '.env.local' });
import { query } from '@/lib/database';
import { PasswordResetService } from '@/lib/services/password-reset-service';

async function createTestToken() {
  try {
    console.log('üîß Creating test token...\n');
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à email)
    const userEmail = 'dvortsov.mish@yandex.ru'; // –≤–∞—à email –∏–∑ –±–∞–∑—ã
    const userResult = await query(
      'SELECT id FROM users WHERE email = $1',
      [userEmail]
    );
    
    if (userResult.rows.length === 0) {
      console.log(`‚ùå User with email ${userEmail} not found`);
      return;
    }
    
    const userId = userResult.rows[0].id;
    console.log(`üë§ Found user: ${userId}`);
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const tokenResult = await PasswordResetService.createResetToken(userId);
    
    if (tokenResult.success) {
      console.log(`‚úÖ Token created successfully!`);
      console.log(`üîë Token: ${tokenResult.token?.substring(0, 16)}...`);
      console.log(`üîó Test URL: http://localhost:3000/ru/auth/reset-password?token=${tokenResult.token}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É
      const validation = await PasswordResetService.validateResetToken(tokenResult.token!);
      console.log(`üîç Validation result:`, validation);
    } else {
      console.log(`‚ùå Failed to create token:`, tokenResult.error);
    }
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

createTestToken();
