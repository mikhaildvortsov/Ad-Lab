#!/usr/bin/env ts-node

/**
 * Cloud Database Readiness Check Script
 * 
 * This script checks if your project is ready for cloud database creation
 * and guides you through the setup process.
 */

import { existsSync, readFileSync } from 'fs';
import { join } from 'path';

interface CheckResult {
  name: string;
  status: 'pass' | 'fail' | 'warning';
  message: string;
  action?: string;
}

function checkFile(path: string, description: string): CheckResult {
  const exists = existsSync(path);
  return {
    name: description,
    status: exists ? 'pass' : 'fail',
    message: exists ? `‚úÖ ${description} –Ω–∞–π–¥–µ–Ω` : `‚ùå ${description} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
    action: exists ? undefined : `–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª ${path}`
  };
}

function checkPackageJson(): CheckResult {
  const packagePath = join(process.cwd(), 'package.json');
  
  if (!existsSync(packagePath)) {
    return {
      name: 'package.json',
      status: 'fail',
      message: '‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω',
      action: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞'
    };
  }

  try {
    const packageContent = JSON.parse(readFileSync(packagePath, 'utf8'));
    const hasDbDependencies = packageContent.dependencies?.['pg'] && packageContent.dependencies?.['@types/pg'];
    const hasDbScripts = packageContent.scripts?.['db:init'] && packageContent.scripts?.['test:neon'];

    if (hasDbDependencies && hasDbScripts) {
      return {
        name: 'package.json –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'pass',
        message: '‚úÖ package.json –≥–æ—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö'
      };
    } else {
      return {
        name: 'package.json –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'warning',
        message: '‚ö†Ô∏è package.json —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        action: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: npm install'
      };
    }
  } catch (error) {
    return {
      name: 'package.json –≤–∞–ª–∏–¥–∞—Ü–∏—è',
      status: 'fail',
      message: '‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json',
      action: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å package.json'
    };
  }
}

function checkEnvExample(): CheckResult {
  const envPath = join(process.cwd(), 'env.example');
  
  if (!existsSync(envPath)) {
    return {
      name: 'env.example',
      status: 'fail',
      message: '‚ùå env.example –Ω–µ –Ω–∞–π–¥–µ–Ω'
    };
  }

  try {
    const envContent = readFileSync(envPath, 'utf8');
    const hasDatabaseUrl = envContent.includes('DATABASE_URL');
    const hasNeonComment = envContent.includes('Neon Tech');

    if (hasDatabaseUrl && hasNeonComment) {
      return {
        name: 'env.example –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'pass',
        message: '‚úÖ env.example –≥–æ—Ç–æ–≤ –¥–ª—è Neon.tech'
      };
    } else {
      return {
        name: 'env.example –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'warning',
        message: '‚ö†Ô∏è env.example —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
        action: '–î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Neon.tech'
      };
    }
  } catch (error) {
    return {
      name: 'env.example –≤–∞–ª–∏–¥–∞—Ü–∏—è',
      status: 'fail',
      message: '‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è env.example'
    };
  }
}

function checkEnvLocal(): CheckResult {
  const envPath = join(process.cwd(), '.env.local');
  
  if (!existsSync(envPath)) {
    return {
      name: '.env.local',
      status: 'warning',
      message: '‚ö†Ô∏è .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω',
      action: '–°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env.local –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ'
    };
  }

  try {
    const envContent = readFileSync(envPath, 'utf8');
    const hasDatabaseUrl = envContent.includes('DATABASE_URL=');
    const hasRealUrl = envContent.includes('neon.tech') || envContent.includes('postgresql://');

    if (hasDatabaseUrl && hasRealUrl) {
      return {
        name: '.env.local –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'pass',
        message: '‚úÖ .env.local –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    } else if (hasDatabaseUrl) {
      return {
        name: '.env.local –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'warning',
        message: '‚ö†Ô∏è .env.local —Ç—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ DATABASE_URL',
        action: '–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ Neon.tech'
      };
    } else {
      return {
        name: '.env.local –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        status: 'fail',
        message: '‚ùå .env.local –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç DATABASE_URL',
        action: '–î–æ–±–∞–≤—å—Ç–µ DATABASE_URL –≤ .env.local'
      };
    }
  } catch (error) {
    return {
      name: '.env.local –≤–∞–ª–∏–¥–∞—Ü–∏—è',
      status: 'fail',
      message: '‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env.local'
    };
  }
}

async function main(): Promise<void> {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

  const checks: CheckResult[] = [
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    checkFile(join(process.cwd(), 'lib', 'database-schema.sql'), '–°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
    checkFile(join(process.cwd(), 'scripts', 'init-database.ts'), '–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏'),
    checkFile(join(process.cwd(), 'lib', 'database.ts'), '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
    checkFile(join(process.cwd(), 'lib', 'database-types.ts'), '–¢–∏–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    checkFile(join(process.cwd(), 'lib', 'services', 'user-service.ts'), '–°–µ—Ä–≤–∏—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
    checkFile(join(process.cwd(), 'lib', 'services', 'query-service.ts'), '–°–µ—Ä–≤–∏—Å –∑–∞–ø—Ä–æ—Å–æ–≤'),
    checkFile(join(process.cwd(), 'lib', 'services', 'billing-service.ts'), '–°–µ—Ä–≤–∏—Å –±–∏–ª–∏–Ω–≥–∞'),
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    checkPackageJson(),
    checkEnvExample(),
    checkEnvLocal(),
  ];

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const passed = checks.filter(c => c.status === 'pass').length;
  const failed = checks.filter(c => c.status === 'fail').length;
  const warnings = checks.filter(c => c.status === 'warning').length;

  // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  checks.forEach(check => {
    console.log(check.message);
    if (check.action) {
      console.log(`   üëâ ${check.action}`);
    }
  });

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings}`);
  console.log(`‚ùå –û—à–∏–±–∫–∏: ${failed}`);

  if (failed > 0) {
    console.log('\nüö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏!');
    console.log('–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
    process.exit(1);
  } else if (warnings > 0) {
    console.log('\n‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.');
    console.log('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.');
  } else {
    console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('–í—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.');
  }

  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: md/CLOUD_DATABASE_SETUP.md');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –≤ Neon.tech: https://neon.tech');
  console.log('3. –ü–æ–ª—É—á–∏—Ç–µ DATABASE_URL –∏ –æ–±–Ω–æ–≤–∏—Ç–µ .env.local');
  console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run db:init');
  console.log('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ: npm run test:neon');

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏
main().catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error);
  process.exit(1);
}); 