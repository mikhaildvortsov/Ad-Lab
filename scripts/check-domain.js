#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/check-domain.js your-domain.com
 */

const https = require('https');
const dns = require('dns');

const domain = process.argv[2];

if (!domain) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–æ–º–µ–Ω: node scripts/check-domain.js your-domain.com');
  process.exit(1);
}

console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–∞: ${domain}\n`);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∑–∞–ø–∏—Å–µ–π
function checkDNS() {
  return new Promise((resolve) => {
    dns.lookup(domain, (err, address) => {
      if (err) {
        console.log('‚ùå DNS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', err.message);
        resolve(false);
      } else {
        console.log('‚úÖ DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', address);
        resolve(true);
      }
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTPS
function checkHTTPS() {
  return new Promise((resolve) => {
    const req = https.get(`https://${domain}`, (res) => {
      console.log('‚úÖ HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å—Ç–∞—Ç—É—Å:', res.statusCode);
      console.log('‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤–∞–ª–∏–¥–µ–Ω');
      resolve(true);
    });

    req.on('error', (err) => {
      console.log('‚ùå HTTPS –æ—à–∏–±–∫–∞:', err.message);
      resolve(false);
    });

    req.setTimeout(5000, () => {
      console.log('‚ùå HTTPS —Ç–∞–π–º–∞—É—Ç');
      req.destroy();
      resolve(false);
    });
  });
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å .vercel.app
function checkRedirect() {
  return new Promise((resolve) => {
    // –ó–∞–º–µ–Ω–∏—Ç–µ your-app –Ω–∞ –≤–∞—à–µ —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
    const vercelDomain = 'your-app.vercel.app';
    
    const req = https.get(`https://${vercelDomain}`, (res) => {
      if (res.statusCode === 301 || res.statusCode === 302) {
        const location = res.headers.location;
        if (location && location.includes(domain)) {
          console.log('‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ:', location);
          resolve(true);
        } else {
          console.log('‚ö†Ô∏è  –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω:', location);
          resolve(false);
        }
      } else {
        console.log('‚ö†Ô∏è  –ù–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å .vercel.app');
        resolve(false);
      }
    });

    req.on('error', (err) => {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:', err.message);
      resolve(false);
    });

    req.setTimeout(5000, () => {
      console.log('‚ö†Ô∏è  –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      req.destroy();
      resolve(false);
    });
  });
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runChecks() {
  const dnsOk = await checkDNS();
  
  if (dnsOk) {
    await checkHTTPS();
    await checkRedirect();
  }

  console.log('\nüìã –ß–µ–∫-–ª–∏—Å—Ç:');
  console.log('‚ñ° DNS –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
  console.log('‚ñ° –î–æ–º–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ Vercel');
  console.log('‚ñ° NEXTAUTH_URL –æ–±–Ω–æ–≤–ª–µ–Ω');
  console.log('‚ñ° Google OAuth redirect URI –æ–±–Ω–æ–≤–ª–µ–Ω');
  console.log('‚ñ° Tribute webhook URL –æ–±–Ω–æ–≤–ª–µ–Ω');
  
  console.log('\nüîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
  console.log(`- –í–∞—à —Å–∞–π—Ç: https://${domain}`);
  console.log(`- Vercel Dashboard: https://vercel.com/dashboard`);
  console.log(`- Google Cloud Console: https://console.cloud.google.com/`);
}

runChecks().catch(console.error); 