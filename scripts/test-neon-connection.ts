#!/usr/bin/env ts-node

import * as dotenv from 'dotenv';
dotenv.config({ path: '.env.local' });

import { healthCheck, query } from '@/lib/database';

async function testNeonConnection() {
  console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ neon.tech...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ DATABASE_URL...');
    const dbUrl = process.env.DATABASE_URL;
    if (!dbUrl) {
      throw new Error('DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    console.log('‚úÖ DATABASE_URL –Ω–∞–π–¥–µ–Ω');
    console.log(`   –ü–æ–ª–Ω—ã–π URL: ${dbUrl.substring(0, 50)}...`);
    
    // –ü–∞—Ä—Å–∏–Ω–≥ URL –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    try {
      const url = new URL(dbUrl);
      console.log(`   –ü—Ä–æ—Ç–æ–∫–æ–ª: ${url.protocol}`);
      console.log(`   –•–æ—Å—Ç: ${url.hostname}`);
      console.log(`   –ü–æ—Ä—Ç: ${url.port || '5432'}`);
      console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${url.pathname.substring(1)}`);
      console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${url.username}`);
      console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${url.search}`);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ neon.tech
      if (!url.hostname.includes('neon.tech')) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç neon.tech!');
        console.log('   –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.');
        console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ localhost
      if (url.hostname === 'localhost' || url.hostname === '127.0.0.1') {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: URL —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ localhost!');
        console.log('   –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ connection string –æ—Ç neon.tech');
        return;
      }
      
      console.log('‚úÖ URL –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–ª—è neon.tech');
      
    } catch (urlError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL:', urlError);
      console.log('   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç DATABASE_URL');
      return;
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const isHealthy = await healthCheck();
    
    if (!isHealthy) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ neon.tech:');
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local');
      console.log('   2. –ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
      console.log('   3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ neon.tech');
      console.log('   4. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://user:pass@host.neon.tech/db?sslmode=require');
      return;
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ neon.tech —É—Å–ø–µ—à–Ω–æ!');

    // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ PostgreSQL
    const versionResult = await query('SELECT version()');
    console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç');
    console.log(`   PostgreSQL –≤–µ—Ä—Å–∏—è: ${versionResult.rows[0].version.split(' ')[0]} ${versionResult.rows[0].version.split(' ')[1]}`);
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbInfoResult = await query('SELECT current_database(), current_user');
    console.log(`   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbInfoResult.rows[0].current_database}`);
    console.log(`   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${dbInfoResult.rows[0].current_user}`);

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
    console.log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü...');
    const tablesResult = await query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
    
    if (tablesResult.rows.length === 0) {
      console.log('‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run db:init');
    } else {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
      tablesResult.rows.forEach(row => {
        console.log(`   - ${row.table_name}`);
      });
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
    console.log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π PostgreSQL...');
    const extensionsResult = await query(`
      SELECT extname 
      FROM pg_extension 
      WHERE extname IN ('uuid-ossp', 'pgcrypto')
    `);
    
    const extensions = extensionsResult.rows.map(row => row.extname);
    if (extensions.includes('uuid-ossp')) {
      console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ uuid-ossp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è  –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ uuid-ossp –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    console.log('\nüéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ neon.tech –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ neon.tech:');
    console.log(error instanceof Error ? error.message : String(error));
    console.log('\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.log('   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å DATABASE_URL –≤ .env.local');
    console.log('   2. –ù–∞–ª–∏—á–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
    console.log('   3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ neon.tech');
    console.log('   4. –§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: postgresql://user:pass@host.neon.tech/db?sslmode=require');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNeonConnection(); 