require('dotenv').config({ path: '.env.local' });
import { PasswordResetService } from '@/lib/services/password-reset-service';
import { EmailService } from '@/lib/services/email-service';

async function testCodeSystem() {
  try {
    console.log('üß™ Testing new code-based password reset system...\n');
    
    const testEmail = 'dvortsov.mish@yandex.ru';
    
    // 1. –°–æ–∑–¥–∞–µ–º –∫–æ–¥
    console.log('1Ô∏è‚É£ Creating reset code...');
    const codeResult = await PasswordResetService.createResetCode(testEmail);
    
    if (!codeResult.success) {
      console.error('‚ùå Failed to create code:', codeResult.error);
      return;
    }
    
    console.log(`‚úÖ Code created: ${codeResult.code}`);
    
    // 2. –°–æ–∑–¥–∞–µ–º email
    console.log('\n2Ô∏è‚É£ Creating email...');
    const emailData = EmailService.createPasswordResetEmail(codeResult.code!, 'ru');
    console.log(`‚úÖ Email created with subject: ${emailData.subject}`);
    
    // 3. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–¥
    console.log('\n3Ô∏è‚É£ Validating code...');
    const validation = await PasswordResetService.validateResetCode(testEmail, codeResult.code!);
    
    if (validation.success) {
      console.log('‚úÖ Code validation successful');
    } else {
      console.error('‚ùå Code validation failed:', validation.error);
      return;
    }
    
    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥
    console.log('\n4Ô∏è‚É£ Testing wrong code...');
    const wrongValidation = await PasswordResetService.validateResetCode(testEmail, '000000');
    
    if (!wrongValidation.success) {
      console.log('‚úÖ Wrong code correctly rejected:', wrongValidation.error);
    } else {
      console.error('‚ùå Wrong code was accepted - this is a bug!');
    }
    
    // 5. –û—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    console.log('\n5Ô∏è‚É£ Marking code as used...');
    const markResult = await PasswordResetService.markCodeAsUsed(testEmail, codeResult.code!);
    
    if (markResult.success) {
      console.log('‚úÖ Code marked as used');
    } else {
      console.error('‚ùå Failed to mark code as used:', markResult.error);
    }
    
    // 6. –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    console.log('\n6Ô∏è‚É£ Testing used code...');
    const usedValidation = await PasswordResetService.validateResetCode(testEmail, codeResult.code!);
    
    if (!usedValidation.success) {
      console.log('‚úÖ Used code correctly rejected:', usedValidation.error);
    } else {
      console.error('‚ùå Used code was accepted - this is a bug!');
    }
    
    console.log('\nüéâ All tests passed! The new code system works correctly.');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
}

testCodeSystem();
