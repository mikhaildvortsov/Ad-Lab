require('dotenv').config({ path: '.env.local' });
import { query } from '@/lib/database';

async function createResetCodesTable() {
  console.log('üîß Creating password_reset_codes table...');
  
  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É —Ç–æ–∫–µ–Ω–æ–≤
    await query('DROP TABLE IF EXISTS password_reset_tokens CASCADE');
    console.log('üóëÔ∏è Dropped old password_reset_tokens table');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–¥–æ–≤
    await query(`
      CREATE TABLE password_reset_codes (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        email VARCHAR(255) NOT NULL,
        code VARCHAR(6) NOT NULL,
        expires_at TIMESTAMP WITH TIME ZONE NOT NULL,
        used_at TIMESTAMP WITH TIME ZONE NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
      );
    `);
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    await query(`
      CREATE INDEX idx_password_reset_codes_email ON password_reset_codes(email);
    `);
    
    await query(`
      CREATE INDEX idx_password_reset_codes_code ON password_reset_codes(code);
    `);
    
    await query(`
      CREATE INDEX idx_password_reset_codes_expires_at ON password_reset_codes(expires_at);
    `);
    
    console.log('‚úÖ Successfully created password_reset_codes table with indexes');
    
  } catch (error) {
    console.error('‚ùå Error creating reset codes table:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  createResetCodesTable().catch(console.error);
}

export { createResetCodesTable };
