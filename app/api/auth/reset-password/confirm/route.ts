import { NextRequest, NextResponse } from 'next/server';
import { UserService } from '@/lib/services/user-service';
import { PasswordResetService } from '@/lib/services/password-reset-service';
import { getTranslation } from '@/lib/translations';
import type { Locale } from '@/lib/i18n';
import bcrypt from 'bcryptjs';

export async function POST(request: NextRequest) {
  try {
    const { email, code, password, locale } = await request.json();
    console.log(`üîç [CONFIRM API] Received password reset request for email: ${email}, code: ${code}`);

    if (!email || !code || !password) {
      return NextResponse.json(
        { success: false, error: 'Email, code and password are required' },
        { status: 400 }
      );
    }

    if (password.length < 8) {
      return NextResponse.json(
        { success: false, error: 'Password must be at least 8 characters long' },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    const codeValidation = await PasswordResetService.validateResetCode(email, code);
    if (!codeValidation.success) {
      console.log(`‚ùå [CONFIRM API] Code validation failed: ${codeValidation.error}`);
      return NextResponse.json(
        { success: false, error: codeValidation.error },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const userResult = await UserService.getUserByEmail(email);
    if (!userResult.success || !userResult.data) {
      return NextResponse.json(
        { success: false, error: 'User not found' },
        { status: 404 }
      );
    }

    const userId = userResult.data.id;
    const user = userResult.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å–æ —Å—Ç–∞—Ä—ã–º
    if (user.password_hash) {
      const isSamePassword = await bcrypt.compare(password, user.password_hash);
      if (isSamePassword) {
        const errorMessage = getTranslation(locale as Locale || 'ru', 'auth.errors.samePassword');
        return NextResponse.json(
          { success: false, error: errorMessage },
          { status: 400 }
        );
      }
    }

    // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
    const saltRounds = 12;
    const passwordHash = await bcrypt.hash(password, saltRounds);

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å, —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –ø–æ–º–µ—á–∞–µ–º —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    const updateResult = await UserService.updateUserPassword(userId, passwordHash);
    if (!updateResult.success) {
      console.error(`‚ùå [CONFIRM API] Failed to update password: ${updateResult.error}`);
      return NextResponse.json(
        { success: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' },
        { status: 500 }
      );
    }

    // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –æ—Ç–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    const markResult = await PasswordResetService.markCodeAsUsed(email, code);
    if (!markResult.success) {
      console.error(`‚ö†Ô∏è [CONFIRM API] Failed to mark code as used: ${markResult.error}`);
      // –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–∞—Ä–æ–ª—å —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ
    }

    // –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –∫–æ–¥—ã
    await PasswordResetService.cleanupExpiredCodes();

    console.log(`‚úÖ [CONFIRM API] Password successfully reset for user: ${userId}`);

    return NextResponse.json({
      success: true,
      message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º.'
    });

  } catch (error) {
    console.error('Password reset confirmation error:', error);
    return NextResponse.json(
      { success: false, error: 'Internal server error' },
      { status: 500 }
    );
  }
}