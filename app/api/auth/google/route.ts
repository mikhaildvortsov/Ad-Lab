import { NextRequest, NextResponse } from 'next/server'
import { createSession, createResponseWithSession, SessionData } from '@/lib/session'
import { UserService } from '@/lib/services/user-service'

export async function GET(request: NextRequest) {
  console.log('üîê Google OAuth endpoint called:', request.url)
  
  const { searchParams } = new URL(request.url)
  const code = searchParams.get('code')
  const error = searchParams.get('error')
  
  console.log('üìù OAuth params:', { 
    hasCode: !!code, 
    hasError: !!error,
    referer: request.headers.get('referer'),
    userAgent: request.headers.get('user-agent')?.substring(0, 50) + '...'
  })
  
  // Check if required environment variables are configured
  const googleClientId = process.env.GOOGLE_CLIENT_ID
  const googleClientSecret = process.env.GOOGLE_CLIENT_SECRET
  const nextAuthUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'
  
  if (!googleClientId || !googleClientSecret) {
    console.error('üö® Google OAuth Configuration Error:')
    console.error('‚ùå GOOGLE_CLIENT_ID exists:', !!googleClientId)
    console.error('‚ùå GOOGLE_CLIENT_SECRET exists:', !!googleClientSecret)
    console.error('üí° Solution: Set these environment variables in .env.local or Vercel settings')
    console.error('üìù Debug endpoint: /api/auth/debug')
    return NextResponse.redirect(new URL('/auth?error=oauth_not_configured', request.url))
  }
  
  // –ï—Å–ª–∏ Google –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
  if (error) {
    console.error('Google OAuth error:', error)
    return NextResponse.redirect(new URL('/auth?error=google_auth_failed', request.url))
  }
  
  if (!code) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é, –∞ –Ω–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
    const intentHeader = request.headers.get('referer')
    const isFromAuthPage = intentHeader?.includes('/auth') || request.nextUrl.searchParams.get('intent') === 'login'
    
    if (!isFromAuthPage) {
      console.log('Google OAuth: Blocking automatic auth redirect, not from auth page')
      return NextResponse.redirect(new URL('/auth?error=auth_required', request.url))
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —á—Ç–æ —ç—Ç–æ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
    const userAgent = request.headers.get('user-agent') || ''
    const isBot = /bot|crawler|spider|crawling/i.test(userAgent)
    
    if (isBot) {
      console.log('Google OAuth: Blocking bot/crawler from OAuth')
      return NextResponse.redirect(new URL('/auth?error=auth_blocked', request.url))
    }
    
    // –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø - —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ Google OAuth
    const googleAuthUrl = new URL('https://accounts.google.com/o/oauth2/v2/auth')
    googleAuthUrl.searchParams.set('client_id', googleClientId)
    googleAuthUrl.searchParams.set('redirect_uri', `${nextAuthUrl}/api/auth/google`)
    googleAuthUrl.searchParams.set('response_type', 'code')
    googleAuthUrl.searchParams.set('scope', 'openid email profile')
    googleAuthUrl.searchParams.set('access_type', 'offline')
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'select_account' —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    googleAuthUrl.searchParams.set('prompt', 'select_account')
    
    console.log('üöÄ Redirecting to Google OAuth:', googleAuthUrl.toString())
    console.log('üìç Redirect URI configured:', `${nextAuthUrl}/api/auth/google`)
    
    return NextResponse.redirect(googleAuthUrl.toString())
  }
  
  try {
    // –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø - –æ–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
    const tokenResponse = await fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        client_id: googleClientId,
        client_secret: googleClientSecret,
        code,
        grant_type: 'authorization_code',
        redirect_uri: `${nextAuthUrl}/api/auth/google`,
      }),
    })
    
    const tokenData = await tokenResponse.json()
    
    if (!tokenResponse.ok) {
      console.error('Token exchange failed:', tokenData)
      throw new Error('Failed to get access token')
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const userResponse = await fetch('https://www.googleapis.com/oauth2/v2/userinfo', {
      headers: {
        Authorization: `Bearer ${tokenData.access_token}`,
      },
    })
    
    const userData = await userResponse.json()
    
    if (!userResponse.ok) {
      console.error('User info failed:', userData)
      throw new Error('Failed to get user info')
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
    let dbUser;
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Google ID
      const existingUserResult = await UserService.getUserByProviderId('google', userData.id);
      
      if (existingUserResult.success && existingUserResult.data) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º last_login_at
        dbUser = existingUserResult.data;
        console.log('Google OAuth: Found existing user:', {
          databaseId: dbUser.id,
          email: dbUser.email,
          providerId: dbUser.provider_id
        });
        
        // Validate that we have the correct UUID format
        if (!dbUser.id || dbUser.id.length !== 36 || !dbUser.id.includes('-')) {
          console.error('ERROR: Invalid user ID format from database:', dbUser.id);
          throw new Error('Invalid user ID format');
        }
        
        await UserService.updateUser(dbUser.id, { 
          name: userData.name,
          avatar_url: userData.picture || null
        });
        console.log('Google OAuth: existing user logged in:', dbUser.email);
      } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        const createUserResult = await UserService.createUser({
          email: userData.email,
          name: userData.name,
          avatar_url: userData.picture || null,
          provider: 'google',
          provider_id: userData.id,
          email_verified: userData.verified_email || true,
          preferred_language: 'ru'
        });
        
        if (createUserResult.success && createUserResult.data) {
          dbUser = createUserResult.data;
          console.log('Google OAuth: Created new user:', {
            databaseId: dbUser.id,
            email: dbUser.email,
            providerId: dbUser.provider_id
          });
          
          // Validate that we have the correct UUID format
          if (!dbUser.id || dbUser.id.length !== 36 || !dbUser.id.includes('-')) {
            console.error('ERROR: Invalid user ID format from database:', dbUser.id);
            throw new Error('Invalid user ID format');
          }
          
          console.log('Google OAuth: new user created:', dbUser.email);
        } else {
          console.error('Failed to create user:', createUserResult.error);
          throw new Error('Failed to create user in database');
        }
      }
    } catch (dbError) {
      console.error('Database error during user creation/retrieval:', dbError);
      throw new Error('Database operation failed');
    }
    
    if (!dbUser) {
      throw new Error('Failed to get or create user');
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    console.log('Google OAuth: Creating session with user ID:', dbUser.id);
    
    const sessionData: SessionData = {
      user: {
        id: dbUser.id,  // This should be the database UUID, not Google ID
        name: dbUser.name,
        email: dbUser.email,
        image: dbUser.avatar_url || undefined,
      },
      accessToken: tokenData.access_token,
      refreshToken: tokenData.refresh_token,
      expiresAt: Math.floor(Date.now() / 1000) + tokenData.expires_in
    }
    
    // Final validation before creating session
    if (sessionData.user.id === userData.id) {
      console.error('CRITICAL ERROR: Session contains Google ID instead of database UUID!');
      console.error('Google ID:', userData.id);
      console.error('Database should have UUID:', dbUser.id);
      throw new Error('Session creation failed: wrong user ID');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    await createSession(sessionData)
    
    // –†–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ callback —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è AuthContext
    const redirectUrl = new URL('/auth/callback', request.url)
    
    console.log('Google OAuth: redirecting to callback:', redirectUrl.toString())
    
    return NextResponse.redirect(redirectUrl.toString())
    
  } catch (error) {
    console.error('Google auth error:', error)
    return NextResponse.redirect(new URL('/auth?error=google_auth_failed', request.url))
  }
} 