import { query } from '@/lib/database';
import crypto from 'crypto';

export interface PasswordResetToken {
  id: string;
  user_id: string;
  token: string;
  expires_at: string;
  used_at?: string;
  created_at: string;
}

export class PasswordResetService {
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email
   */
  static async createResetToken(userId: string): Promise<{ success: boolean; token?: string; error?: string }> {
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–æ–∫–µ–Ω (—É–≤–µ–ª–∏—á–∏–ª –¥–æ 64 –±–∞–π—Ç –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      const token = crypto.randomBytes(64).toString('hex');
      
      // –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 1 —á–∞—Å (—Å–æ–∫—Ä–∞—â–µ–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      const resetTokenExpiryHours = parseInt(process.env.PASSWORD_RESET_TOKEN_EXPIRY_HOURS || '1', 10);
      const expiresAt = new Date(Date.now() + resetTokenExpiryHours * 60 * 60 * 1000);
      
      // –£–î–ê–õ–Ø–ï–ú –í–°–ï —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞)
      await query(
        'DELETE FROM password_reset_tokens WHERE user_id = $1',
        [userId]
      );
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
      const result = await query(
        `INSERT INTO password_reset_tokens (user_id, token, expires_at) 
         VALUES ($1, $2, $3) RETURNING token, id, expires_at`,
        [userId, token, expiresAt]
      );
      
      if (result.rows.length > 0) {
        const createdToken = result.rows[0].token;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        if (createdToken !== token) {
          console.error('Password reset token mismatch detected');
          return {
            success: false,
            error: 'Token creation error'
          };
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
        console.log(`üîë Password reset token created for user ${userId.substring(0, 8)}..., expires in ${resetTokenExpiryHours} hour(s) at ${expiresAt.toISOString()}`);
        
        return {
          success: true,
          token: createdToken
        };
      } else {
        return {
          success: false,
          error: 'Failed to create reset token'
        };
      }
    } catch (error) {
      console.error('Error creating password reset token:', error);
      return {
        success: false,
        error: 'Database error'
      };
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
   * –í–ê–ñ–ù–û: –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–º–µ—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π!
   * –¢–æ–∫–µ–Ω –æ—Ç–º–µ—á–∞–µ—Ç—Å—è –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ markTokenAsUsed()
   */
  static async validateResetToken(token: string): Promise<{ success: boolean; userId?: string; error?: string }> {
    try {
      const result = await query(
        `SELECT user_id, expires_at, used_at, created_at 
         FROM password_reset_tokens 
         WHERE token = $1`,
        [token]
      );
      
      if (result.rows.length === 0) {
        return {
          success: false,
          error: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.'
        };
      }
      
      const tokenData = result.rows[0];
      const now = new Date();
      const expiresAt = new Date(tokenData.expires_at);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
      if (tokenData.used_at) {
        return {
          success: false,
          error: '–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É.'
        };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–æ–∫–µ–Ω
      if (now > expiresAt) {
        return {
          success: false,
          error: '–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è.'
        };
      }
      
      return {
        success: true,
        userId: tokenData.user_id
      };
    } catch (error) {
      console.error('Error validating reset token:', error);
      return {
        success: false,
        error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      };
    }
  }

  /**
   * –û—Ç–º–µ—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)
   * –¢–æ–∫–µ–Ω –ú–û–ú–ï–ù–¢–ê–õ–¨–ù–û –∏—Å—Ç–µ–∫–∞–µ—Ç –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
   */
  static async markTokenAsUsed(token: string): Promise<{ success: boolean; error?: string }> {
    try {
      const result = await query(
        'UPDATE password_reset_tokens SET used_at = CURRENT_TIMESTAMP WHERE token = $1 AND used_at IS NULL RETURNING token, user_id',
        [token]
      );
      
      if (result.rows.length === 0) {
        return {
          success: false,
          error: 'Token was already used or does not exist'
        };
      }
      
      const { user_id } = result.rows[0];
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –í–°–ï —Ç–æ–∫–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
      await query(
        'DELETE FROM password_reset_tokens WHERE user_id = $1 AND token != $2',
        [user_id, token]
      );
      
      return { success: true };
    } catch (error) {
      console.error('Error marking token as used:', error);
      return {
        success: false,
        error: 'Database error'
      };
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Ç–æ–∫–µ–Ω—ã (–º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
   */
  static async cleanupExpiredTokens(): Promise<{ success: boolean; error?: string }> {
    try {
      await query(
        'DELETE FROM password_reset_tokens WHERE expires_at < CURRENT_TIMESTAMP'
      );
      
      return { success: true };
    } catch (error) {
      console.error('Error cleaning up expired tokens:', error);
      return {
        success: false,
        error: 'Database error'
      };
    }
  }
}