import fs from 'fs';
import path from 'path';
import { Resend } from 'resend';

export interface EmailOptions {
  to: string;
  subject: string;
  html: string;
  text?: string;
}

export class EmailService {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Resend —Å API –∫–ª—é—á–æ–º
   */
  private static initResend() {
    const apiKey = process.env.RESEND_API_KEY;
    
    if (!apiKey) {
      throw new Error('Resend API key not configured. Please set RESEND_API_KEY environment variable.');
    }
    
    return new Resend(apiKey);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —á–µ—Ä–µ–∑ Resend API –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ—Ç –≤ —Ñ–∞–π–ª (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
   */
  static async sendEmail(options: EmailOptions): Promise<{ success: boolean; error?: string; messageId?: string }> {
    const shouldSendRealEmails = process.env.SEND_REAL_EMAILS === 'true';
    
    if (shouldSendRealEmails) {
      return this.sendRealEmail(options);
    } else {
      return this.logEmailToFile(options);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π email —á–µ—Ä–µ–∑ Resend
   */
  private static async sendRealEmail(options: EmailOptions): Promise<{ success: boolean; error?: string; messageId?: string }> {
    try {
      const resend = this.initResend();
      
      const fromEmail = process.env.RESEND_FROM_EMAIL || 'noreply@adlab.guru';
      const fromName = process.env.RESEND_FROM_NAME || 'Ad Lab';
      
      const { data, error } = await resend.emails.send({
        from: `${fromName} <${fromEmail}>`,
        to: [options.to],
        subject: options.subject,
        html: options.html,
        text: options.text,
      });

      if (error) {
        console.error('Resend email error:', error);
        return {
          success: false,
          error: error.message || 'Failed to send email via Resend'
        };
      }

      console.log('Email sent successfully via Resend:', data?.id);
      return {
        success: true,
        messageId: data?.id
      };

    } catch (error) {
      console.error('Error sending email via Resend:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred while sending email'
      };
    }
  }

  /**
   * –õ–æ–≥–∏—Ä—É–µ—Ç email –≤ —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  private static async logEmailToFile(options: EmailOptions): Promise<{ success: boolean; error?: string }> {
    try {
      const timestamp = new Date().toISOString();
      const logData = {
        timestamp,
        to: options.to,
        subject: options.subject,
        html: options.html,
        text: options.text
      };

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      const logsDir = path.join(process.cwd(), 'logs');
      if (!fs.existsSync(logsDir)) {
        fs.mkdirSync(logsDir, { recursive: true });
      }

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
      const logFile = path.join(logsDir, `email-${new Date().toISOString().split('T')[0]}.json`);
      
      let existingLogs = [];
      if (fs.existsSync(logFile)) {
        const existingContent = fs.readFileSync(logFile, 'utf8');
        try {
          existingLogs = JSON.parse(existingContent);
        } catch (e) {
          existingLogs = [];
        }
      }

      existingLogs.push(logData);
      fs.writeFileSync(logFile, JSON.stringify(existingLogs, null, 2));

      console.log(`üìß Email logged to file: ${logFile}`);
      console.log(`üì® Subject: ${options.subject}`);
      console.log(`üì¨ To: ${options.to}`);

      return { success: true };

    } catch (error) {
      console.error('Error logging email to file:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred while logging email'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç HTML –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è —Å –∫–æ–¥–æ–º
   */
  static createPasswordResetEmail(resetCode: string, locale: string = 'ru'): { html: string; text: string; subject: string } {
    const isRussian = locale === 'ru';
    
    const subject = isRussian ? '–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è - Ad Lab' : 'Password Reset Code - Ad Lab';
    
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${subject}</title>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { text-align: center; margin-bottom: 30px; }
          .logo { font-size: 24px; font-weight: bold; color: #2563eb; }
          .content { background: #f8fafc; padding: 30px; border-radius: 8px; margin: 20px 0; }
          .code-box { 
            background: #2563eb; 
            color: white; 
            padding: 20px; 
            border-radius: 8px; 
            text-align: center; 
            margin: 25px 0;
            font-size: 32px;
            font-weight: bold;
            letter-spacing: 4px;
          }
          .footer { text-align: center; margin-top: 30px; color: #6b7280; font-size: 14px; }
          .warning { background: #fef3c7; padding: 15px; border-radius: 6px; margin: 20px 0; }
          .instructions { background: #e0f2fe; padding: 15px; border-radius: 6px; margin: 20px 0; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <div class="logo">‚ú® Ad Lab</div>
          </div>
          
          <div class="content">
            <h2>${isRussian ? '–ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è' : 'Password Reset Code'}</h2>
            <p>
              ${isRussian 
                ? '–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥:'
                : 'You requested a password reset for your account. Use this code:'
              }
            </p>
            
            <div class="code-box">
              ${resetCode}
            </div>
            
            <div class="instructions">
              <strong>${isRussian ? 'üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:' : 'üìã Instructions:'}</strong><br>
              ${isRussian 
                ? '1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è<br>2. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ —ç—Ç–æ—Ç –∫–æ–¥<br>3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å'
                : '1. Go to the password reset page<br>2. Enter your email and this code<br>3. Create a new password'
              }
            </div>
            
            <div class="warning">
              <strong>${isRussian ? '‚ö†Ô∏è –í–∞–∂–Ω–æ:' : '‚ö†Ô∏è Important:'}</strong><br>
              ${isRussian 
                ? '–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.'
                : 'This code is valid for 15 minutes and can only be used once. If you did not request a password reset, simply ignore this email.'
              }
            </div>
          </div>
          
          <div class="footer">
            <p>
              ${isRussian 
                ? '–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ Ad Lab'
                : 'Best regards,<br>Ad Lab Team'
              }
            </p>
          </div>
        </div>
      </body>
      </html>
    `;

    const text = `
${subject}

${isRussian 
  ? '–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Ad Lab.'
  : 'You requested a password reset for your Ad Lab account.'
}

${isRussian 
  ? '–í–∞—à –∫–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:'
  : 'Your password reset code:'
}

${resetCode}

${isRussian 
  ? '–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 15 –º–∏–Ω—É—Ç. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–∏–º email.'
  : 'This code is valid for 15 minutes. Enter it on the password reset page along with your email.'
}

${isRussian 
  ? '–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.'
  : 'If you did not request a password reset, please ignore this email.'
}

${isRussian 
  ? '–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ Ad Lab'
  : 'Best regards, Ad Lab Team'
}
`;

    return { html, text, subject };
  }
}
