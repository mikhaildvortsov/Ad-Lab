'use client'
import React from 'react'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { CheckCircle, AlertTriangle, XCircle, Info } from 'lucide-react'
interface TextValidatorProps {
  text: string
  textType?: 'script' | 'goal' | 'creative' | 'general'
  showRecommendations?: boolean
  className?: string
}
interface ValidationResult {
  status: 'error' | 'warning' | 'success' | 'info'
  message: string
  score: number
}
export function TextValidator({ 
  text, 
  textType = 'script', 
  showRecommendations = true,
  className = '' 
}: TextValidatorProps) {
  const getValidationRules = () => {
    switch (textType) {
      case 'script':
        return {
          minLength: 20,
          maxLength: 2000,
          optimalLength: [100, 500],
          keywords: ['–∫—É–ø–∏—Ç—å', '–ø–æ–ª—É—á–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '–∑–≤–æ–Ω–∏—Ç–µ', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'],
          structure: ['–ø—Ä–æ–±–ª–µ–º–∞', '—Ä–µ—à–µ–Ω–∏–µ', '–≤—ã–≥–æ–¥–∞', '–¥–µ–π—Å—Ç–≤–∏–µ']
        }
      case 'goal':
        return {
          minLength: 10,
          maxLength: 500,
          optimalLength: [30, 150],
          keywords: ['—É–≤–µ–ª–∏—á–∏—Ç—å', '–ø–æ–≤—ã—Å–∏—Ç—å', '—É–ª—É—á—à–∏—Ç—å', '–¥–æ—Å—Ç–∏—á—å', '–ø–æ–ª—É—á–∏—Ç—å', '–∫–æ–Ω–≤–µ—Ä—Å–∏—è'],
          structure: ['—Ü–µ–ª—å', '–º–µ—Ç—Ä–∏–∫–∞', '—Å—Ä–æ–∫']
        }
      case 'creative':
        return {
          minLength: 15,
          maxLength: 1000,
          optimalLength: [50, 300],
          keywords: ['–∫—Ä–µ–∞—Ç–∏–≤', '–¥–∏–∑–∞–π–Ω', '–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–∏–¥–µ—è', '–æ–±—Ä–∞–∑'],
          structure: ['–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç']
        }
      default:
        return {
          minLength: 10,
          maxLength: 3000,
          optimalLength: [50, 800],
          keywords: [],
          structure: []
        }
    }
  }
  const validateText = (): ValidationResult[] => {
    const rules = getValidationRules()
    const results: ValidationResult[] = []
    const words = text.trim().split(/\s+/).filter(word => word.length > 0)
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0)
    if (text.length < rules.minLength) {
      results.push({
        status: 'error',
        message: `–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç. –ú–∏–Ω–∏–º—É–º ${rules.minLength} —Å–∏–º–≤–æ–ª–æ–≤ (—Å–µ–π—á–∞—Å: ${text.length})`,
        score: 0
      })
    } else if (text.length > rules.maxLength) {
      results.push({
        status: 'error',
        message: `–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ú–∞–∫—Å–∏–º—É–º ${rules.maxLength} —Å–∏–º–≤–æ–ª–æ–≤ (—Å–µ–π—á–∞—Å: ${text.length})`,
        score: 0
      })
    } else if (text.length < rules.optimalLength[0]) {
      results.push({
        status: 'warning',
        message: `–¢–µ–∫—Å—Ç –∫–æ—Ä–æ—Ç–∫–æ–≤–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: ${rules.optimalLength[0]}-${rules.optimalLength[1]} —Å–∏–º–≤–æ–ª–æ–≤`,
        score: 60
      })
    } else if (text.length > rules.optimalLength[1]) {
      results.push({
        status: 'warning',
        message: `–¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–æ–≤–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: ${rules.optimalLength[0]}-${rules.optimalLength[1]} —Å–∏–º–≤–æ–ª–æ–≤`,
        score: 70
      })
    } else {
      results.push({
        status: 'success',
        message: `–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ (${text.length} —Å–∏–º–≤–æ–ª–æ–≤)`,
        score: 100
      })
    }
    if (sentences.length === 0) {
      results.push({
        status: 'error',
        message: '–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        score: 0
      })
    } else if (sentences.length === 1) {
      results.push({
        status: 'warning',
        message: '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã',
        score: 50
      })
    } else {
      results.push({
        status: 'success',
        message: `–•–æ—Ä–æ—à–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: ${sentences.length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π`,
        score: 90
      })
    }
    if (textType === 'script' && rules.keywords.length > 0) {
      const foundKeywords = rules.keywords.filter(keyword => 
        text.toLowerCase().includes(keyword.toLowerCase())
      )
      if (foundKeywords.length === 0) {
        results.push({
          status: 'warning',
          message: '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é (–∫—É–ø–∏—Ç—å, –∑–∞–∫–∞–∑–∞—Ç—å, –ø–æ–ª—É—á–∏—Ç—å –∏ —Ç.–¥.)',
          score: 40
        })
      } else {
        results.push({
          status: 'success',
          message: `–ù–∞–π–¥–µ–Ω—ã –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é: ${foundKeywords.join(', ')}`,
          score: 85
        })
      }
    }
    const avgWordsPerSentence = sentences.length > 0 ? words.length / sentences.length : 0
    if (avgWordsPerSentence > 20) {
      results.push({
        status: 'warning',
        message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ. –£–ø—Ä–æ—Å—Ç–∏—Ç–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏',
        score: 60
      })
    } else if (avgWordsPerSentence < 5) {
      results.push({
        status: 'warning',
        message: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π',
        score: 65
      })
    } else {
      results.push({
        status: 'success',
        message: `–•–æ—Ä–æ—à–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å: ${Math.round(avgWordsPerSentence)} —Å–ª–æ–≤ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏`,
        score: 90
      })
    }
    return results
  }
  const getOverallScore = (results: ValidationResult[]): number => {
    if (results.length === 0) return 0
    return Math.round(results.reduce((acc, result) => acc + result.score, 0) / results.length)
  }
  const getScoreColor = (score: number): string => {
    if (score >= 80) return 'text-green-600'
    if (score >= 60) return 'text-yellow-600'
    return 'text-red-600'
  }
  const getScoreIcon = (status: ValidationResult['status']) => {
    switch (status) {
      case 'success': return <CheckCircle className="h-4 w-4 text-green-600" />
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-600" />
      case 'error': return <XCircle className="h-4 w-4 text-red-600" />
      default: return <Info className="h-4 w-4 text-blue-600" />
    }
  }
  const getRecommendations = (): string[] => {
    const rules = getValidationRules()
    const recommendations: string[] = []
    if (textType === 'script') {
      if (text.length < rules.optimalLength[0]) {
        recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏ –µ–≥–æ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö')
        recommendations.push('–í–∫–ª—é—á–∏—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ (–æ—Ç–∑—ã–≤—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É)')
        recommendations.push('–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∫–æ—Ç–æ—Ä—É—é —Ä–µ—à–∞–µ—Ç –≤–∞—à –ø—Ä–æ–¥—É–∫—Ç')
      }
      if (!text.toLowerCase().includes('—Å–∫–∏–¥–∫') && !text.toLowerCase().includes('–∞–∫—Ü–∏')) {
        recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)')
      }
      if (!text.includes('?')) {
        recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏')
      }
    }
    if (textType === 'goal') {
      if (!text.toLowerCase().includes('—É–≤–µ–ª–∏—á') && !text.toLowerCase().includes('–ø–æ–≤—ã—Å')) {
        recommendations.push('–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ü–µ–ª—å –∫–∞–∫ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π')
      }
      if (!text.match(/\d+/)) {
        recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –∏ –º–µ—Ç—Ä–∏–∫–∏')
      }
    }
    return recommendations
  }
  const validationResults = validateText()
  const overallScore = getOverallScore(validationResults)
  const recommendations = getRecommendations()
  if (!text.trim()) {
    return (
      <div className={`space-y-3 ${className}`}>
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-gray-700">–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞</span>
          <Badge variant="outline">–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç</Badge>
        </div>
      </div>
    )
  }
  return (
    <div className={`space-y-3 ${className}`}>
      {}
      <div className="flex items-center justify-between">
        <span className="text-sm font-medium text-gray-700">–ö–∞—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–∞</span>
        <div className="flex items-center gap-2">
          <span className={`text-sm font-semibold ${getScoreColor(overallScore)}`}>
            {overallScore}/100
          </span>
          <Badge variant={overallScore >= 80 ? 'default' : overallScore >= 60 ? 'secondary' : 'destructive'}>
            {overallScore >= 80 ? '–û—Ç–ª–∏—á–Ω–æ' : overallScore >= 60 ? '–•–æ—Ä–æ—à–æ' : '–¢—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è'}
          </Badge>
        </div>
      </div>
      {}
      <Progress value={overallScore} className="h-2" />
      {}
      <div className="space-y-2">
        {validationResults.map((result, index) => (
          <Alert key={index} className="py-2">
            <div className="flex items-start gap-2">
              {getScoreIcon(result.status)}
              <AlertDescription className="text-xs">
                {result.message}
              </AlertDescription>
            </div>
          </Alert>
        ))}
      </div>
      {}
      {showRecommendations && recommendations.length > 0 && (
        <div className="bg-blue-50 rounded-lg p-3 border border-blue-200">
          <h4 className="text-sm font-medium text-blue-900 mb-2">
            üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
          </h4>
          <ul className="space-y-1">
            {recommendations.map((rec, index) => (
              <li key={index} className="text-xs text-blue-800 flex items-start gap-1">
                <span className="text-blue-600 mt-0.5">‚Ä¢</span>
                {rec}
              </li>
            ))}
          </ul>
        </div>
      )}
      {}
      <div className="flex gap-4 text-xs text-gray-500">
        <span>{text.length} —Å–∏–º–≤–æ–ª–æ–≤</span>
        <span>{text.trim().split(/\s+/).filter(word => word.length > 0).length} —Å–ª–æ–≤</span>
        <span>{text.split(/[.!?]+/).filter(s => s.trim().length > 0).length} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</span>
      </div>
    </div>
  )
}
